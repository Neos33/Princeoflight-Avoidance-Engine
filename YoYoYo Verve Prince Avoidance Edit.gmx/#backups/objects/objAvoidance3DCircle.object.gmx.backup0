// 2022-11-13 00:52:28
#event properties (no comments/etc. here are saved)
parent_index = -1;
visible = false;
uses_physics = false;

#event create
event_inherited();
numBullets = 1 //Number of bullets in the circle
dAngle = 1 //Time increment, where 1t = 1 cycle. In the default case, one cycle is 200 frames. (4 seconds)

motion = 1 //Motion setting: 1 = normal circle, 2 = loop back to center, 3 = complex circle, 4 = swaying circle
radius = 0; //Maximum distance of the bullets from the center

angle = 0

init=false;
circleID=0;
lineBullets=0;
initBulletAngle=-90;
bulletID=objAvoidance3DBullet;

phi=180//random(360);
dPhi=0;
theta=0;
dTheta=0;

frozen=false;
slowdown=false;

killer=false;
image_alpha=1.0;

baseScale=1.0;

z=0;

#event destroy|Clean up all bullets
if(init)
for (var i=0; i<numBullets; i++) {
    var ct = angle+i/numBullets // individual cherry's time
    var r = radius
    var a = ct*360
    if(instance_exists(bullets[i])){
        with(bullets[i]){ 
            instance_destroy();
        }
    }
}

#event alarm0
speed=0;

#event step
// Calculate radius and angle based on timer and radius
// Then move each cherry to that location
// Code ported from Collect the Pixels
if(frozen) exit;
theta+=dTheta;
phi+=dPhi;
if(!init){
    init=true;
    for (var i=0; i<numBullets; i++) {
        bullets[i] = instance_create(x, y, bulletID)
        //bullets[i].sprite_index = sprite_index
        bullets[i].depth = -5
        bullets[i].image_alpha=0;
    }
}

radius=image_xscale;
for (var i=0; i<numBullets; i++) {
    if(instance_exists(bullets[i])){
        var ct = angle+i/numBullets; // individual cherry's time
        var r = radius;
        var a = ct;
        var r2=r/5;
        
        r = radius
        a = ct
        
        // Move bullets
        var baseX=lengthdir_x(r, a);
        var baseY=lengthdir_y(r*dcos(theta), a);
        
        bullets[i].x = x+baseX*dcos(phi)+baseY*dsin(phi); // apply rotation
        bullets[i].y = y+baseX*dsin(phi)-baseY*dcos(phi);
        bullets[i].z = z+r*dcos(a-90)*dsin(theta)
        bullets[i].baseAlpha=image_alpha;
        bullets[i].killer=killer;
        bullets[i].r = radius;
        bullets[i].baseScale=baseScale;
        
    } 
}
angle += dAngle