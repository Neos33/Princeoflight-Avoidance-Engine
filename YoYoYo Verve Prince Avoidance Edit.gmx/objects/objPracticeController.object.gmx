<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPracticeController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Practice mode is disabled then we destroy the controller
if !global.practice_enabled
{
    initialize = false;
    instance_destroy();
    exit;
}

initialize = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room speed
default_room_speed = 50;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack timings
// Variables taken from the *Sample avoidance*

//Add attacks using avoidance_add_attack. "END" should always be last
numTimings = 0;

attackNames = ds_list_create();
attackTimings = ds_list_create();

avoidance_add_attack("ATTACK1", 0);
avoidance_add_attack("ATTACK2 long name", 500);
avoidance_add_attack("ATTACK3 a very very very very long name", 1000);


// "END" should be the last one, only change the second argument (time)
avoidance_add_attack("END", 2000);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vars

// Get the total of attacks (Do not modify)
total_attacks = numTimings;
total_main_segments = total_attacks - 1; // Ignore *END* attack

// Room position
screen_x = 0;
screen_y = 0;

// Box position / thickness
segment_x = array_create(total_attacks);
segment_y = array_create(total_attacks);
box_x = screen_x + 32;
box_y = screen_y + 66;
thick_x = 256;
thick_y = 38;

// Box separation
separation_y = max(thick_y, 44); // Box separation

// Info
attackTimingInfoSeconds = array_create(total_attacks);
attackTimingInfoDurationSeconds = array_create(total_attacks);

song_length = attackTimings[| total_attacks - 1] / 50; // Converted in seconds


// Control
current_segment_selection = -1;

// Init with the value we picked beforehand when we come back
current_segment_picked = global.practice_segment;
if global.practice_segment == -1
    current_segment_picked = -1;




var box_string = 0;
if total_attacks &gt; 0
{
    for (var i = 0; i &lt; total_main_segments; i += 1)
    {
        // Get the next attack
        var _next_attack = min(i + 1, total_main_segments); // Do not exceed the ds_list limit
        
        // Info in seconds
        attackTimingInfoSeconds[i] = attackTimings[| i] / default_room_speed;
        attackTimingInfoDurationSeconds[i] = abs(attackTimings[| i] - attackTimings[| _next_attack]) / default_room_speed;

        // Percentage
        attackTimingInfoPercentage[i] = lerp(0, 100, attackTimings[| i]  / attackTimings[| total_attacks - 1]);
        
        // Position
        segment_x[i] = box_x;
        segment_y[i] = box_y + separation_y * i;
        
        // Determine who has the longest name to stretch the box
        box_string = max(box_string, string_width(attackNames[| i]));
    }
}

// Margin
button_margin_x = 32;

// Stretch the box thickness
thick_x = max(box_string, 128);
thick_x += button_margin_x; // Add margin


// Practice pages
enum PRACTICE_PAGE
{
    ASK_USER,
    SEGMENTS,
    OTHER
}

// Current page
menu = PRACTICE_PAGE.ASK_USER;

// Start from the segment page if we came back from a practice attempt
if global.practice_use 
{
    menu = PRACTICE_PAGE.SEGMENTS;
}


// Box of the first page (asking the player if they want practice mode) 
ask_menu_hovered = false;
ask_menu_position_x = 400;
ask_menu_position_y = 48;

ask_thick_x = 96;
ask_thick_y = 16;


// Cursor animation
cursor_alpha = 0.8;
cursor_time = 0;
cursor_time_speed = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu audio
sfx_hover = sndJump;
sfx_selected = sndItem;
sfx_back = sndDJump;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// event_user(0) - Clean up
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ask user page

if menu == PRACTICE_PAGE.ASK_USER
{
    if point_in_rectangle(mouse_x, mouse_y, ask_menu_position_x - ask_thick_x, ask_menu_position_y - ask_thick_y, 
        ask_menu_position_x + ask_thick_x, ask_menu_position_y + ask_thick_y)
    {
        // Hover
        if !ask_menu_hovered
        {
            audio_play_sound(sfx_hover, 0, false);
            ask_menu_hovered = true;
        }
        
        // Clicked
        if mouse_check_button_pressed(mb_left)
        {
            menu = PRACTICE_PAGE.SEGMENTS;
            audio_play_sound(sfx_selected, 0, false);
            global.practice_use = true;
        }
    }
    else 
    {
        ask_menu_hovered = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Segments page

if menu == PRACTICE_PAGE.SEGMENTS
{
    for (var i = 0; i &lt; total_main_segments; i += 1)
    {
        if point_in_rectangle(mouse_x, mouse_y, segment_x[i], segment_y[i], segment_x[i] + thick_x, segment_y[i] + thick_y)
        {
            // Hover
            if current_segment_selection != i
            {
                audio_play_sound(sfx_hover, 0, false);
            }
            current_segment_selection = i;
            
            // Pick
            if mouse_check_button_pressed(mb_left)
            {
                if current_segment_picked != i
                {
                    current_segment_picked = i;
                    audio_play_sound(sfx_selected, 0, false);
                    
                    // The avoidance will start at the moment you selected
                    global.practice_starts = attackTimings[| i];
                    
                    // Update the global, so the segment chosen will be selected when we come back
                    global.practice_segment = current_segment_picked;
                }
            }
        }
    }
    
    // Unselect
    var _first = 0;
    var _last = total_main_segments - 1;
    var _mouse_outside_of_boxes = !point_in_rectangle(mouse_x, mouse_y, 
                                            segment_x[_first], segment_y[_first], 
                                            segment_x[_last] + thick_x, segment_y[_last] + thick_y);
                                            
    if _mouse_outside_of_boxes
    {
        // Unhover
        current_segment_selection = -1;
        
        // Unselect
        if mouse_check_button_pressed(mb_left)// and current_segment_picked != -1
        {
            current_segment_picked = -1;
            global.practice_starts = 0;
            
            global.practice_segment = current_segment_picked;
        }
    }
    
    // Go back
    if mouse_check_button_pressed(mb_right)
    {
        current_segment_picked = -1;
        menu = PRACTICE_PAGE.ASK_USER;
        
        audio_play_sound(sfx_back, 0, false);
        
        // Reset / deactivate globals
        global.practice_starts = 0; // Timer
        global.practice_segment = 0;
        global.practice_use = false;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor animation
cursor_alpha = 0.8 + lengthdir_y(0.2, cursor_time);
cursor_time += cursor_time_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if initialize
{
    ds_list_destroy(attackNames);
    ds_list_destroy(attackTimings);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// event_user(0) - Clean up
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw "Use practice mode" button 

if menu == PRACTICE_PAGE.ASK_USER
{
    // Box/Text setup
    var _color_box = c_black;
    var _color_box_outline = c_white;
    var _color_text = c_white;
    
    // Set drawing
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    
    // Change the colors if the box is hovered
    if ask_menu_hovered
    {
        _color_box = c_gray;
        _color_box_outline = c_black;
        _color_text = c_black;
    }
    
    
    
    // Draw box
    var _x = screen_x + ask_menu_position_x;
    var _y = screen_y + ask_menu_position_y;
    draw_sprite_ext(spr1x1, 0, _x - ask_thick_x, _y - ask_thick_y, ask_thick_x * 2, ask_thick_y * 2, 0, _color_box, 1);
    
    // Outline box
    draw_set_color(_color_box_outline);
    draw_rectangle(_x - ask_thick_x, _y - ask_thick_y, _x + ask_thick_x - 1, _y + ask_thick_y - 1, true);
    
    // Draw text
    draw_set_color(_color_text);
    draw_text(_x, _y, "Use practice mode");
    
    
    // Draw cursor
    draw_sprite_ext(sprPracticeCursor, 0, 400, 96, 0.5, 0.5, 0, c_white, cursor_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw practice segments

// Draw color settings
var _color_text = c_white;
var _color_box = c_black;
var _color_box_outline = c_white;

// Text align
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if menu == PRACTICE_PAGE.SEGMENTS
{
    for (var i = 0; i &lt; total_main_segments; i += 1)
    {
        if current_segment_picked == i // Selected
        {
            _color_text = c_black;
            _color_box = merge_color(c_yellow, c_white, 0.4);
            _color_box_outline = c_black;
        }
        else if current_segment_selection == i // Hovered
        {
            _color_text = c_white;
            _color_box = c_gray;
            _color_box_outline = c_white;
        }
        else 
        {
            _color_text = c_white;
            _color_box = c_black;
            _color_box_outline = c_white;
        }

        // Draw box
        draw_sprite_ext(spr1x1, 0, segment_x[i], segment_y[i], thick_x, thick_y, 0, _color_box, 0.8);
        
        // Outline box
        draw_set_color(_color_box_outline);
        draw_rectangle(segment_x[i], segment_y[i], segment_x[i] + thick_x - 1, segment_y[i] + thick_y - 1, true)
        
        // Draw text
        draw_set_color(_color_text);
        draw_text(segment_x[i] + thick_x / 2, segment_y[i] + thick_y / 2, string(i+1) + ". " + attackNames[| i]);
    }
    
    // Draw "Pick your segment above the practice segments
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_set_color(c_white);
    
    draw_text(box_x + thick_x / 2, box_y - 10, "Select the segment to practice");

    // Draw right sidebar info (box)
    draw_sprite_ext(spr1x1, 0, screen_x + 432, screen_y + 48, 352, 432, 0, c_black, 0.3);
    draw_rectangle(screen_x + 432, screen_y + 48, screen_x + 784, screen_y + 480, true);
    
    // Text info settings
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    
    // Show info if any of the segments is being selected
    if current_segment_picked != -1
    {
        // Draw thumbnail
        draw_sprite_ext(sprPracticeSegmentPreview, current_segment_picked, screen_x + 608, screen_y + 178, 1, 1, 0, c_white, 1);
        draw_sprite_ext(sprPracticeSegmentPreviewFrame, current_segment_picked, screen_x + 608, screen_y + 178, 1, 1, 0, c_white, 1);
        
        // Draw timer start + percentage of the song
        var _formatted_time = string(floor(attackTimingInfoSeconds[current_segment_picked]/60)) + ":" + string(floor(attackTimingInfoSeconds[current_segment_picked] mod 60));
        draw_text(screen_x + 800 - 256, screen_y + 304, "Starts at: " + _formatted_time + " | " + string(attackTimingInfoPercentage[current_segment_picked]) + "%");
        
        // Draw duration of the segment
        var _formatted_time_duration = string(floor(attackTimingInfoDurationSeconds[current_segment_picked]/60)) + ":" + string(floor(attackTimingInfoDurationSeconds[current_segment_picked] mod 60));
        draw_text(screen_x + 800 - 256, screen_y + 304 + 16, "Duration: " + _formatted_time_duration);
    }
    
    // Draw song length / duration
    var _formatted_time_song_length = string(floor(song_length/60)) + ":" + string(floor(song_length mod 60));
    draw_text(screen_x + 800 - 256, screen_y + 304 + 48, "Song length: " + _formatted_time_song_length);
    
    // Draw cursor
    //draw_sprite_ext(sprPracticeCursor, 0, screen_x + 400, screen_y + 96, 0.5, 0.5, 0, c_white, cursor_alpha);
    
    
    
    // Go back
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text(screen_x + 800 - 32, screen_y + 608 - 32, "*Right click* to exit.");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset drawing settings
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
